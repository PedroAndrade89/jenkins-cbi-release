pipeline {
    agent {
        label 'trivy-agent'
    }
    options {
        timeout(time: 30, unit: 'MINUTES') // Timeout for the entire pipeline
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github-pedro', url: 'https://github.com/PedroAndrade89/cbi-release-exercise.git'
            }
        }
        stage('Integrity Check') {
            steps {
                echo 'Checking code integrity...'
                // Add your integrity check commands here, e.g., linting
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                   def dockerfileDir = 'docker-app'
                   def dockerfile = "${dockerfileDir}/Dockerfile"
                   docker.build("test", "-f ${dockerfile} ${dockerfileDir}")
                }
            }
        }
        stage('Vulnerability Scanning') {

            steps {
                script {
                    // Use Trivy to scan Docker image for vulnerabilities
                    def trivyReport = sh(script: 'trivy image -f json -o trivy_report.json test', returnStdout: true)
                    def vulnerabilities = readJSON file: 'trivy_report.json'

                    // Check for HIGH or CRITICAL vulnerabilities
                    def highOrCriticalVulnerabilities = vulnerabilities.find { it.Severity in ['HIGH', 'CRITICAL'] }

                    if (highOrCriticalVulnerabilities) {
                        currentBuild.result = 'FAILURE'
                        error('New HIGH or CRITICAL vulnerabilities found! Check email for details.')
                    }
                }
            }
        }
        stage('Report Vulnerabilities') {
            steps {
                sh 'trivy image --format json vulnerability-report.json test'
                archiveArtifacts artifacts: 'vulnerability-report.json', onlyIfSuccessful: true
            }
        }
    }
}


