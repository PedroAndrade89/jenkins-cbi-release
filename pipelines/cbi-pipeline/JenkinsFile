pipeline {
    agent {
        label 'jenkins-slave'
    }
    options {
        timeout(time: 30, unit: 'MINUTES') // Timeout for the entire pipeline
    }
    stages {
        stage('Checkout') {
            steps {
                script{
                    def branchName = ${env.ref} - "refs/heads/"
                }
                git branch: '${branchName}', credentialsId: 'github-pedro', url: params.git_url
            }
        }

        stage('Integrity Check') {
            steps {
                echo 'Checking code integrity...'
                // Add your integrity check commands here, e.g., linting
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def dockerfileDir = 'docker-app'
                    def dockerfile = "${dockerfileDir}/Dockerfile"
                    docker_image = docker.build(params.image_name, "-f ${dockerfile} ${dockerfileDir}")

                    def buildTimeStamp = sh(returnStdout: true, script: "date -u '+%Y%m%dT%H%M%S'").trim()
                }
            }
        }

        stage('Vulnerability Scanning') {
            steps {
                script {
                    // Use Trivy to scan Docker image for vulnerabilities
                    sh "trivy image -f json --output trivy_report.json ${params.image_name}"
                    def trivyReportJson = readFile 'trivy_report.json'
                    def trivyReport = readJSON text: trivyReportJson

                    // Initialize a list to collect high or critical vulnerabilities
                    def criticalVulnerabilities = []

                    // Iterate over each result in the Trivy report
                    trivyReport.Results.each { result ->
                        // Check if the result contains a 'Vulnerabilities' key and it's not null
                        if (result.Vulnerabilities) {
                            // Iterate over each vulnerability in the result
                            result.Vulnerabilities.each { vulnerability ->
                                if (vulnerability.Severity in ['HIGH', 'CRITICAL']) {
                                    // Add high or critical vulnerabilities to the list
                                    criticalVulnerabilities << vulnerability
                                }
                            }
                        }
                    }

                    // Echo collected vulnerabilities
                    if (criticalVulnerabilities.size() > 0) {
                        echo "High or Critical Vulnerabilities Found:"
                        criticalVulnerabilities.each { vulnerability ->
                            echo "${vulnerability.VulnerabilityID} - ${vulnerability.Severity} - ${vulnerability.Title}"
                        }
                    } else {
                        echo "No high or critical vulnerabilities found."
                    }

                    // Fail the build if any high or critical vulnerabilities are found
                    if (criticalVulnerabilities.size() > 0) {
                        currentBuild.result = 'FAILURE'
                        error('New HIGH or CRITICAL vulnerabilities found! Check the Trivy report for details.')
                    }
                }
            }
        }

        stage('Report Vulnerabilities') {
            steps {
                sh "trivy image --format json --output vulnerability-report.json ${params.image_name}"
                archiveArtifacts artifacts: 'vulnerability-report.json', onlyIfSuccessful: true
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    docker.withRegistry("https://${params.ecr_uri}", 'ecr:us-east-1:jenkins-ecr-access') {
                        docker_image.push("latest")
                    }
                }
            }
        }
    }
}





