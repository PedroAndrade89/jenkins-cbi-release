pipeline {
    agent {
        label 'jenkins-slave'
    }
    options {
        timeout(time: 30, unit: 'MINUTES') // Timeout for the entire pipeline
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: params.git_branch, credentialsId: 'github-pedro', url: params.git_url
            }
        }
        stage('Integrity Check') {
            steps {
                echo 'Checking code integrity...'
                // Add your integrity check commands here, e.g., linting
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                   def dockerfileDir = 'docker-app'
                   def dockerfile = "${dockerfileDir}/Dockerfile"
                   docker.build(params.image_name, "-f ${dockerfile} ${dockerfileDir}")

                   buildTimeStamp = sh(returnStdout: true, script: "date -u '+%Y%m%dT%H%M%S'").trim()
                }
            }
        }
        stage('Vulnerability Scanning') {

            steps {
                script {

                    // Use Trivy to scan Docker image for vulnerabilities
                    sh 'trivy image -f json -o trivy_report.json ${image_name}'
                    def trivyReportJson = readFile 'trivy_report.json'
                    def vulnerabilities = readJSON text: trivyReportJson

                    // Initialize a flag to indicate if high or critical vulnerabilities are found
                    def hasHighOrCriticalVulnerabilities = false

                    // Iterate over each result in the Trivy report
                    trivyReport.Results.each { result ->
                        // Check if the result contains a 'Vulnerabilities' key and it's not null
                        if (result.Vulnerabilities) {
                            // Iterate over each vulnerability in the result
                            result.Vulnerabilities.each { vulnerability ->
                                if (vulnerability.Severity in ['HIGH', 'CRITICAL']) {
                                    // Set the flag to true if a high or critical vulnerability is found
                                    hasHighOrCriticalVulnerabilities = true
                                }
                            }
                        }
                    }

                    // Fail the build if any high or critical vulnerabilities are found
                    if (hasHighOrCriticalVulnerabilities) {
                        currentBuild.result = 'FAILURE'
                        error('New HIGH or CRITICAL vulnerabilities found! Check the Trivy report for details.')
                    }
                }
            }
        }
        stage('Report Vulnerabilities') {
            steps {
                sh 'trivy image --format json vulnerability-report.json ${image_name}'
                archiveArtifacts artifacts: 'vulnerability-report.json', onlyIfSuccessful: true
            }
        }
    }
}



