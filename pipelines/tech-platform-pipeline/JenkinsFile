pipeline {

    parameters {
            string(name: 'git_project_url', defaultValue : 'git@github.com:PedroAndrade89/tech-platform-engineering.git', description: "Github Repo url")
            string(name: 'ecr_uri', defaultValue : '154396925587.dkr.ecr.us-east-1.amazonaws.com/tech_platform-app', description: "AWS Container registry")
            string(name: 'BRANCH_NAME', defaultValue : 'main', description: "Github Repo branch")
    }
    agent {
        label 'jenkins-slave'
    }
    options {
        timeout(time: 30, unit: 'MINUTES') // Timeout for the entire pipeline
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: "${env.BRANCH_NAME}", credentialsId: 'github-pedro', url: params.git_project_url
            }
        }

        stage('Integrity Check') {
            steps {
                script{
                    echo 'Checking Dockerfile integrity...'
                    dockerfile = "Dockerfile"
                    sh "/bin/hadolint  ${dockerfile}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def buildTimeStamp = sh(returnStdout: true, script: "date -u '+%Y%m%dT%H%M%S'").trim()
                    def commitHash = env.GIT_COMMIT
                    def normalizedBranchName = env.BRANCH_NAME.replaceAll("/", "-").toLowerCase()
                    tag = "${params.image_name}:${normalizedBranchName}.${buildTimeStamp}.${commitHash}".toLowerCase()

                    docker_image = docker.build("${tag}", "-f ${dockerfile} .")

                }
            }
        }

        stage('Vulnerability Scanning') {
            steps {
                script {
                    // Use Trivy to scan Docker image for vulnerabilities
                    sh "trivy image -f json --output vulnerability-report.json ${tag}"
                    def trivyReportJson = readFile 'vulnerability-report.json'
                    def trivyReport = readJSON text: trivyReportJson

                    // Initialize a list to collect high or critical vulnerabilities
                    def criticalVulnerabilities = []

                    // Iterate over each result in the Trivy report
                    trivyReport.Results.each { result ->
                        // Check if the result contains a 'Vulnerabilities' key and it's not null
                        if (result.Vulnerabilities) {
                            // Iterate over each vulnerability in the result
                            result.Vulnerabilities.each { vulnerability ->
                                if (vulnerability.Severity in ['HIGH', 'CRITICAL']) {
                                    // Add high or critical vulnerabilities to the list
                                    criticalVulnerabilities << vulnerability

                                }
                            }
                        }
                    }

                    // Echo collected vulnerabilities
                    if (criticalVulnerabilities.size() > 0) {
                        echo "High or Critical Vulnerabilities Found:"
                        criticalVulnerabilities.each { vulnerability ->
                            echo "${vulnerability.VulnerabilityID} - ${vulnerability.Severity} - ${vulnerability.Title}"
                             archiveArtifacts artifacts: "vulnerability-report.json", onlyIfSuccessful: false
                        }
                    } else {
                        echo "No high or critical vulnerabilities found."
                    }

                    // Fail the build if any high or critical vulnerabilities are found
                    if (criticalVulnerabilities.size() > 0) {
                        archiveArtifacts artifacts: "vulnerability-report.json", onlyIfSuccessful: false
                        currentBuild.result = 'FAILURE'
                        error('New HIGH or CRITICAL vulnerabilities found! Check the Trivy report for details.')
                    }
                }
            }
        }
        stage('Push Docker Image to ECR') {
            steps {
                script {
                    docker.withRegistry("https://${params.ecr_uri}", 'ecr:us-east-1:jenkins-ecr-access') {
                        docker_image.push()
                    }
                }
            }
        }
        stage('Initialize terraform dir Environment Variables') {
            steps {
                script {
                    env.DIR = ""
                    switch (params.environment) {
                        case 'prod':
                            env.DIR = 'terraform/environments/prod'
                            break
                        case 'stage':
                            env.DIR = 'terraform/environments/stage'
                            break
                    }
                }
            }
        }
        stage('Run TFLint') {
            steps {
                script {
                    dir("${env.DIR}") {
                        // Run tflint and write results to a file, capturing exit code without failing immediately
                        def tflintExitCode = sh(script: 'tflint --format=json > tflint-results.json', returnStatus: true)

                        // Check if the file exists before trying to read it
                        def tflintResults = fileExists('tflint-results.json') ? readJSON(file: 'tflint-results.json') : null
                        if (tflintResults && tflintResults.errors.size() > 0) {
                            // Archive the results file even if there were errors
                            archiveArtifacts artifacts: 'tflint-results.json', onlyIfSuccessful: false
                            // Throw an error to fail the build after archiving the results
                            error("TFLint reported errors.")
                        }
//                         } else if (tflintExitCode != 0) {
//                             // Handle cases where tflint may fail without producing a valid JSON output
//                             error("TFLint failed with exit code: ${tflintExitCode}")
//                         }
                    }
                }
                // Archive the artifacts only once and only if the file exists
                archiveArtifacts artifacts: "${env.DIR}/tflint-results.json", onlyIfSuccessful: false
            }
        }


        stage('Run TFSec') {
            steps {
                script {
                    dir("${env.DIR}") {
                        // Run TFSec and output results to a file, capturing the exit code
                        def tfsecExitCode = sh(script: 'tfsec . --format=json --tfvars-file terraform.tfvars --soft-fail > tfsec-results.json', returnStatus: true)

                        // Check if the results file exists and read it if it does
                        def tfsecResults = fileExists('tfsec-results.json') ? readJSON(file: 'tfsec-results.json') : null

                        // Check for critical severity issues in the results
                        if (tfsecResults && tfsecResults.results.any { result -> result.severity == "CRITICAL" }) {
                            archiveArtifacts artifacts: 'tfsec-results.json', onlyIfSuccessful: false
                            error("Critical alerts found by TFSec.")
                        }

                        // Handle cases where TFSec may fail without producing a valid JSON output
                        if (tfsecExitCode != 0 && tfsecResults == null) {
                            error("TFSec failed with exit code: ${tfsecExitCode}")
                        }
                    }
                    // Archive the artifacts outside the dir block but within script block
                    archiveArtifacts artifacts: "${env.DIR}/tfsec-results.json", onlyIfSuccessful: false
                }
            }
        }

        stage('TF Validate') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    dir(env.DIR) {
                        withCredentials([
                            [
                                $class: 'AmazonWebServicesCredentialsBinding',
                                credentialsId: 'jenkins-aws-user',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                            ]
                        ]) {
                            sh """
                                terraform init
                                terraform validate
                            """
                        }
                    }
                }
            }
        }

        stage('TF Apply - Deploy to Stage') {
            steps {
                dir(env.DIR) {
                    script {
                        withCredentials([
                            [
                                $class: 'AmazonWebServicesCredentialsBinding',
                                credentialsId: 'jenkins-aws-user',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                            ]
                        ]) {
                            sh """
                            terraform plan -var ecs_task_container_image=${tag} -out=plan.out
                            """
                            if (env.BRANCH_NAME == "main") {
                                input message: 'Do you want to apply the Terraform plan?', ok: 'Yes'
                                sh 'terraform apply plan.out'
                            }
                            else {
                                sh 'terraform apply -input=false -auto-approve plan.out '
                            }

                            // Get Terraform outputs
                            outputJson = sh(script: 'terraform output -json', returnStdout: true).trim()
                            echo "Terraform Outputs: ${outputJson}"
//                             def outputs = readJSON text: outputJson
//                             clusterName = outputs.cluster_name.value
                        }
                    }
                }
            }
        }
//         stage('Deploy artifact to test') {
//             when {
//                 branch "main"
//             }
//             steps {
//                 echo 'Stage: Deploy artifact to test'
//             }
//         }
//         stage('Perform test') {
//             when {
//                 branch "main"
//             }
//             steps {
//                 echo 'Stage: Perform test'
//             }
//         }
//         stage('Validate exit criteria') {
//             when {
//                 branch "main"
//             }
//             steps {
//                 echo 'Stage: Validate exit criteria'
//             }
//         }
//         stage('Deploy artifact to production') {
//             when {
//                 branch "main"
//             }
//             steps {
//                 echo 'Stage: Deploy artifact to production'
//             }
//         }

    }
// Stage: Notify actors
    post {
        success {
            echo 'Stage: Notify actors - success'
        }
        failure {
            echo 'Stage: Notify actors - failure'
        }
        always {
            archiveArtifacts artifacts: 'vulnerability-report.json', onlyIfSuccessful: false
        }
    }
}





