def clusterName

pipeline {
    parameters {
        choice(name: 'action', choices: 'create\ndestroy', description: 'Create/update or destroy the eks cluster.')
        string(name: 'region', defaultValue : 'us-east-1', description: "AWS region.")
        choice(name: 'eks_version', choices: '1.29\n1.28\n1.27', description: 'K8s version to install.')
        booleanParam(name: 'TFLINT', defaultValue: true, description: "Run TFLint?")
        booleanParam(name: 'TFSEC', defaultValue: true, description: "Run TFSec?")
        booleanParam(name: 'cw_logs', defaultValue : true, description: "Setup Cloudwatch logging?")
        booleanParam(name: 'cw_metrics', defaultValue : true, description: "Setup Cloudwatch metrics and Container Insights?")
        booleanParam(name: 'metrics_server', defaultValue : true, description: "Setup k8s metrics-server?")
        booleanParam(name: 'dashboard', defaultValue : true, description: "Setup k8s dashboard?")
        booleanParam(name: 'prometheus', defaultValue : true, description: "Setup k8s prometheus?")
        booleanParam(name: 'nginx_ingress', defaultValue : true, description: "Setup nginx ingress and load balancer?")
        booleanParam(name: 'ca', defaultValue : true, description: "Setup k8s Cluster Autoscaler?")
        booleanParam(name: 'cert_manager', defaultValue : true, description: "Setup cert-manager for certificate handling?")
        booleanParam(name: 'fluent_bit', defaultValue : true, description: "Setup fluent_bit and send logs to graylog")

    }

    options {
        disableConcurrentBuilds()
        timeout(time: 40, unit: 'MINUTES')
    }

    environment{
        KUBECTL_PATH = "/usr/local/sbin"
    }

    agent {
        label 'jenkins-slave'
    }

    stages {


        stage('Initialize virtual Environment') {
            steps{
                script{
                    sh 'source ~/ansible_env/bin/activate'
                }
            }
        }

        stage('Initialize Environment Variables') {
            steps {
                script {
                    env.DIR = ""
                    switch (env.BRANCH_NAME) {
                        case 'qa':
                            env.DIR = 'terraform/environments/qa'
                            break
                        case 'main':
                            env.DIR = 'terraform/environments/prod'
                            break
                        case 'stage':
                            env.DIR = 'terraform/environments/stage'
                            break
                        default:
                            error "Unknown branch name: ${env.BRANCH_NAME}"
                    }
                }
            }
        }

        stage('Run TFLint') {
            when {
                expression { env.TFLINT == 'true' }
                expression { params.action == 'create' }
            }
            steps {
                script {
                    dir("${env.DIR}") {
                        sh 'tflint --format=json > tflint-results.json'
                        def tflintResults = readJSON file: 'tflint-results.json'
                        if (tflintResults.errors.size() > 0) {
                            archiveArtifacts artifacts: 'terraform/environments/stage/tflint-results.json', onlyIfSuccessful: false
                            error("TFLint reported errors.")
                        }
                    }
                }
                archiveArtifacts artifacts: 'terraform/environments/stage/tflint-results.json', onlyIfSuccessful: false
            }
        }

        stage('Run TFSec') {
            when {
                expression { env.TFSEC == 'true' }
                expression { params.action == 'create' }
            }
            steps {
                script {
                    dir("${env.DIR}") {
                        sh 'tfsec . --format=json --soft-fail > tfsec-results.json'
                        def tfsecResults = readJSON file: 'tfsec-results.json'
                        if (tfsecResults.results.any { result -> result.severity == "CRITICAL" }) {
                            archiveArtifacts artifacts: 'terraform/environments/stage/tflint-results.json', onlyIfSuccessful: false
                            error("Critical alerts found by TFSec.")
                        }
                    }
                }
                archiveArtifacts artifacts: 'terraform/environments/stage/tfsec-results.json', onlyIfSuccessful: false
            }
        }

        stage('TF Validate') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    dir(env.DIR) {
                        withCredentials([
                            [
                                $class: 'AmazonWebServicesCredentialsBinding',
                                credentialsId: 'jenkins-automate-user',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                            ]
                        ]) {
                            sh """
                                terraform init
                                terraform validate
                            """
                        }
                    }
                }
            }
        }

        stage('TF Apply') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                dir(env.DIR) {
                    script {
                        withCredentials([
                            [
                                $class: 'AmazonWebServicesCredentialsBinding',
                                credentialsId: 'jenkins-automate-user',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                            ]
                        ]) {
                            sh """
                            terraform plan \
                               -var eks_version=${params.eks_version} \
                               -var region=${params.region} \
                               -out=plan.out
                            """
                            if (env.BRANCH_NAME == "main") {
                                input message: 'Do you want to apply the Terraform plan?', ok: 'Yes'
                                sh 'terraform apply plan.out'
                            }
                            else {
                                sh 'terraform apply -input=false -auto-approve plan.out '
                            }

                            // Get Terraform outputs
                            outputJson = sh(script: 'terraform output -json', returnStdout: true).trim()
                            echo "Terraform Outputs: ${outputJson}"
                            def outputs = readJSON text: outputJson
                            clusterName = outputs.cluster_name.value
                        }
                    }
                }
            }
        }

        stage('Checkout Configs') {
            steps {
                git branch: "main", credentialsId: 'github-pedro', url: "git@github.com:PedroAndrade89/jenkins-pipelines.git"
                script {
                    env.DIR = "pipelines/kubernetes-deploy-pipeline/configs/${env.BRANCH_NAME}"
                }
            }
        }

        stage('Cluster setup') {
            when {
                expression { params.action == 'create' }
            }

            steps {
                script {
                  dir("${env.DIR}"){
//                     def grafanaURL = 'http://<Grafana_Service_IP>:3000' // Replace with your Grafana URL
//                     def grafanaUser = 'admin' // Default Grafana admin user
//                     def grafanaPassword = 'YourAdminPassword' // Replace with your Grafana admin password
//                     def prometheusURL = 'http://prometheus-server.prometheus.svc.cluster.local' // Prometheus service URL within the cluster
                    withCredentials([
                        [
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'jenkins-automate-user',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ],
                        [
                            $class: 'SSHUserPrivateKeyBinding', // SSH private key binding
                            credentialsId: 'letsencrypt-stage-key',
                            keyFileVariable: 'SSH_KEY'
                        ]
                    ]) {
                        sh "aws eks update-kubeconfig --name ${clusterName} --region ${params.region}"

                        //Create storage class for encrypted gp3 volumes
                        sh "${env.KUBECTL_PATH}/kubectl apply -f storage-class.yaml"
                        // CW Metrics and Container Insights setup
                        // https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Container-Insights-prerequisites.html
                        // https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Container-Insights-setup-EKS-quickstart.html
                        if (params.cw_metrics == true) {
                          echo "Setting up Cloudwatch metrics and Container Insights."
                          sh """
                              curl --silent https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/quickstart/cwagent-fluentd-quickstart.yaml | \\
                              sed "s/{{cluster_name}}/${clusterName}/;s/{{region_name}}/ ${params.region}/" > cwagent-fluentd-quickstart-modified.yaml
                          """
                          sh "${env.KUBECTL_PATH}/kubectl apply -f cwagent-fluentd-quickstart-modified.yaml"
                        }

                        // https://docs.aws.amazon.com/eks/latest/userguide/metrics-server.html
                        // Need metrics server for horizontal and vertical pod autoscalers, prometheus and k8s dashboard
                        if (params.metrics_server == true) {
                          echo "Setting up k8s metrics-server."
                          sh "${env.KUBECTL_PATH}/kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml"
                        }

                       if (params.dashboard == true) {
                           echo "Setting up k8s dashboard."
                           sh """
                               ${env.KUBECTL_PATH}/kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.5/aio/deploy/recommended.yaml
                           """
                           echo "You need to get the secret token and then use kubectl proxy to get to the dashboard:"
                           echo "${env.KUBECTL_PATH}/kubectl -n kube-system describe secret \$(kubectl -n kube-system get secret | grep eks-admin | awk '{print \$1}')"
                           echo "${env.KUBECTL_PATH}/kubectl proxy"
                           echo "Then visit: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#!/login"
                           echo "See docs at https://docs.aws.amazon.com/eks/latest/userguide/dashboard-tutorial.html"
                       }

                        if (params.ca == true) {
                            echo "Setting up k8s Cluster Autoscaler."
                             // Keep the google region logic simple; us or eu
                              gregion='us'

                              if (params.region =~ '^eu') {
                                gregion='eu'
                              }

                              // CA image tag, which is k8s major version plus CA minor version.
                              // See for latest versions: https://github.com/kubernetes/autoscaler/releases
                              switch (params.eks_version) {
                                case '1.29':
                                  tag='0'
                                  break;
                                case '1.28':
                                  tag='0'
                                  break;
                                case '1.27':
                                  tag='1'
                                  break;
                              }

                              // Setup documented here: https://docs.aws.amazon.com/eks/latest/userguide/cluster-autoscaler.html
                              // Tested ca late 2021 on k8s 1.21.
                              sh """
                                  # Apply the Cluster Autoscaler YAML, replacing <YOUR CLUSTER NAME> with the actual name
                                  curl https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml | \\
                                  sed 's/<YOUR CLUSTER NAME>/${clusterName}/g' | \\
                                  ${env.KUBECTL_PATH}/kubectl apply -f -

                                  # Annotate the deployment
                                  ${env.KUBECTL_PATH}/kubectl -n kube-system annotate deployment.apps/cluster-autoscaler cluster-autoscaler.kubernetes.io/safe-to-evict="false"

                                  # Sleep for 5 seconds to ensure the deployment is applied
                                  sleep 5

                                  # Fetch, modify, and apply the deployment in one pipeline
                                  ${env.KUBECTL_PATH}/kubectl -n kube-system get deployment.apps/cluster-autoscaler -o json | \\
                                  jq '.spec.template.spec.containers[0].command += ["--balance-similar-node-groups","--skip-nodes-with-system-pods=false"]' | \\
                                  ${env.KUBECTL_PATH}/kubectl apply -f -

                                  # Set the image
                                  ${env.KUBECTL_PATH}/kubectl -n kube-system set image deployment.apps/cluster-autoscaler cluster-autoscaler=${gregion}.gcr.io/k8s-artifacts-prod/autoscaling/cluster-autoscaler:v${params.k8s_version}.${tag}
                              """

                        }

                        // See: https://aws.amazon.com/premiumsupport/knowledge-center/eks-access-kubernetes-services/
                        // Also https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-helm/
                        // Switched to helm install late 2021 to simplify install across different k8s versions.
                        if (params.nginx_ingress == true) {
                            echo "Setting up nginx ingress and load balancer."
                            sh """
                                ${env.KUBECTL_PATH}/kubectl create ns nginx-ingress
                                helm repo add nginx-stable https://helm.nginx.com/stable
                                helm repo update
                                ${env.KUBECTL_PATH}/kubectl apply -f nginx-ingress-cm.yaml
                                helm upgrade --install --atomic nginx-ingress nginx-stable/nginx-ingress --namespace nginx-ingress -f nginx-ingress-values.yaml
                                ${env.KUBECTL_PATH}/kubectl apply -f nginx-ingress-proxy.yaml
                                echo "Dns name of nginx ingress load balancer is below:"
                                ${env.KUBECTL_PATH}/kubectl get svc --namespace=nginx-ingress
                            """
                        }


                        // https://docs.aws.amazon.com/eks/latest/userguide/prometheus.html
                        if (params.prometheus == true) {
                            echo "Setting up k8s prometheus."
                            sh """
                                ${env.KUBECTL_PATH}/kubectl create ns prometheus
                                ${env.KUBECTL_PATH}/kubectl apply -f prometheus-config-cm.yaml
                                helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                                helm repo update
                                helm upgrade --install --atomic prometheus prometheus-community/prometheus --namespace prometheus -f prometheus-values.yaml
                              """

                              echo "To connect to prometheus, follow the instructions above, then connect to http://localhost:9090"
                              echo "See docs at https://docs.aws.amazon.com/eks/latest/userguide/prometheus.html"
                              echo "Alternativly use k8s Lens which is much easier (choose Helm for the Prometheus setup its not auto detected)."
                        }

                        if (params.cert_manager == true) {
                            echo "Setting up cert-manager."
                            sh """

                                helm repo add jetstack https://charts.jetstack.io || true
                                helm repo update
                                helm upgrade --install --atomic cert-manager jetstack/cert-manager --namespace cert-manager --set installCRDs=true --create-namespace
                                sleep 30 # allow cert-manager setup in the cluster

                                ${env.KUBECTL_PATH}/kubectl create secret generic letsencrypt-staging --from-file=ssh-privatekey=\$SSH_KEY --namespace cert-manager

                                ${env.KUBECTL_PATH}/kubectl apply -f cluster-issuer-stage.yaml
                                """
                        }


                        // Updated cert-manager version installed late 2021
                        if (params.fluent_bit == true) {
                            echo "Setting up fluent-bit to send logs to graylog"
                            sh """
                                ${env.KUBECTL_PATH}/kubectl create ns logging
                                ${env.KUBECTL_PATH}/kubectl apply -f fluent-bit-cm.yaml
                                helm repo add fluent https://fluent.github.io/helm-charts
                                helm repo update
                                helm upgrade --install --atomic fluent-bit fluent/fluent-bit --namespace logging -f fluent-bit-values.yaml
                              """
                        }

                    }
                  }
                }
            }
        }

        stage('TF Destroy') {
            when {
                expression { params.action == 'destroy' }
            }
            steps {
                dir(env.DIR) {
                    script {
                        input "Destroy Terraform stack ${params.cluster} in AWS?"
                        withCredentials([
                            [
                                $class: 'AmazonWebServicesCredentialsBinding',
                                credentialsId: 'jenkins-automate-user',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                            ]
                        ]) {
                            sh """
                              terraform init
                              terraform plan -var eks_version=${params.eks_version} -var region=${params.region} -out=plan.out
                            """
                            // Get Terraform outputs
                            outputJson = sh(script: 'terraform output -json', returnStdout: true).trim()
                            echo "Terraform Outputs: ${outputJson}"
                            def outputs = readJSON text: outputJson
                            clusterName = outputs.cluster_name.value
                            sh """

                              aws eks update-kubeconfig --name ${clusterName} --region ${params.region}

                              # Some of these helm charts may not be installed; just try and remove them anyway
                              helm uninstall prometheus --namespace prometheus || true
                              helm uninstall cert-manager --namespace cert-manager || true
                              ${env.KUBECTL_PATH}/kubectl delete -f nginx-ingress-proxy.yaml || true
                              helm uninstall nginx-ingress --namespace nginx-ingress || true
                              sleep 20

                              terraform destroy -auto-approve
                            """
                        }
                    }
                }
            }
        }
    }

//     post {
//         always {
//             cleanWs()
//         }
//     }
}
