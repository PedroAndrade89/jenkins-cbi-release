def clusterName

pipeline {
    parameters {
        choice(name: 'action', choices: 'create\ndestroy', description: 'Create/update or destroy the ECS cluster.')
        choice(name: 'environment', choices: 'stage\nprod\n', description: "Environment type")

    }

    options {
        disableConcurrentBuilds()
        timeout(time: 40, unit: 'MINUTES')
    }

    agent {
        label 'jenkins-slave'
    }

    stages {


        stage('Initialize virtual Environment') {
            steps{
                script{
                    sh 'source ~/ansible_env/bin/activate'
                }
            }
        }

        stage('Initialize Environment Variables') {
            steps {
                script {
                    env.DIR = ""
                    switch (params.environment) {
                        case 'prod':
                            env.DIR = 'environments/prod'
                            break
                        case 'stage':
                            env.DIR = 'environments/stage'
                            break
                    }
                }
            }
        }

        stage('Checkout Configs') {
            steps {
                git branch: "main", credentialsId: 'github-pedro', url: "git@github.com:PedroAndrade89/tech-platform-iac.git"
            }
        }

        stage('Run TFLint') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    dir("${env.DIR}") {
                        // Run tflint and write results to a file, capturing exit code without failing immediately
                        def tflintExitCode = sh(script: 'tflint --format=json > tflint-results.json', returnStatus: true)

                        // Check if the file exists before trying to read it
                        def tflintResults = fileExists('tflint-results.json') ? readJSON(file: 'tflint-results.json') : null
                        if (tflintResults && tflintResults.errors.size() > 0) {
                            // Archive the results file even if there were errors
                            archiveArtifacts artifacts: 'tflint-results.json', onlyIfSuccessful: false
                            // Throw an error to fail the build after archiving the results
                            error("TFLint reported errors.")
                        }
//                         } else if (tflintExitCode != 0) {
//                             // Handle cases where tflint may fail without producing a valid JSON output
//                             error("TFLint failed with exit code: ${tflintExitCode}")
//                         }
                    }
                }
                // Archive the artifacts only once and only if the file exists
                archiveArtifacts artifacts: "${env.DIR}/tflint-results.json", onlyIfSuccessful: false
            }
        }


        stage('Run TFSec') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    dir("${env.DIR}") {
                        // Run TFSec and output results to a file, capturing the exit code
                        def tfsecExitCode = sh(script: 'tfsec . --format=json --soft-fail > tfsec-results.json', returnStatus: true)

                        // Check if the results file exists and read it if it does
                        def tfsecResults = fileExists('tfsec-results.json') ? readJSON(file: 'tfsec-results.json') : null

                        // Log the tfsecResults to help with debugging
                        echo "TFSec Results: ${tfsecResults}"

                        // Check if results are not null and not empty
                        if (tfsecResults?.results) {
                            // Check for critical severity issues in the results
                            if (tfsecResults.results.any { result -> result.severity == "CRITICAL" }) {
                                archiveArtifacts artifacts: 'tfsec-results.json', onlyIfSuccessful: false
                                error("Critical alerts found by TFSec.")
                            } else {
                                echo "No critical alerts found by TFSec."
                            }
                        } else {
                            echo "No results or empty results found in TFSec output."
                        }

                        // Handle cases where TFSec may fail without producing a valid JSON output
                        if (tfsecExitCode != 0 && tfsecResults == null) {
                            error("TFSec failed with exit code: ${tfsecExitCode} and no valid results were produced.")
                        } else if (tfsecExitCode != 0) {
                            echo "TFSec completed with non-zero exit code: ${tfsecExitCode} but did not produce critical alerts."
                        }
                    }
                    // Archive the artifacts outside the dir block but within script block
                    archiveArtifacts artifacts: "${env.DIR}/tfsec-results.json", onlyIfSuccessful: false
                }
            }
        }

        stage('TF Validate') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    dir(env.DIR) {
                        withCredentials([
                            [
                                $class: 'AmazonWebServicesCredentialsBinding',
                                credentialsId: 'jenkins-aws-user',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                            ]
                        ]) {
                            sh """
                                terraform init
                                terraform validate
                            """
                        }
                    }
                }
            }
        }

        stage('TF Apply') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                dir(env.DIR) {
                    script {
                        withCredentials([
                            [
                                $class: 'AmazonWebServicesCredentialsBinding',
                                credentialsId: 'jenkins-aws-user',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                            ]
                        ]) {
                            sh """
                            terraform plan -out=plan.out
                            """
                            if (env.BRANCH_NAME == "main") {
                                input message: 'Do you want to apply the Terraform plan?', ok: 'Yes'
                                sh 'terraform apply plan.out'
                            }
                            else {
                                sh 'terraform apply -input=false -auto-approve plan.out '
                            }

                            // Get Terraform outputs
                            outputJson = sh(script: 'terraform output -json', returnStdout: true).trim()
                            echo "Terraform Outputs: ${outputJson}"
//                             def outputs = readJSON text: outputJson
//                             clusterName = outputs.cluster_name.value
                        }
                    }
                }
            }
        }

       stage('TF Destroy') {
            when {
                expression { params.action == 'destroy' }
            }
            steps {
                dir(env.DIR) {
                    script {
                        input "Destroy Terraform stack ${params.cluster} in AWS?"
                        withCredentials([
                            [
                                $class: 'AmazonWebServicesCredentialsBinding',
                                credentialsId: 'jenkins-aws-user',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                            ]
                        ]) {
                            sh """
                              terraform init
                              terraform plan -out=plan.out
                              terraform destroy -auto-approve
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}